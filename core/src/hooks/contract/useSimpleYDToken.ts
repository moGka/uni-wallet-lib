import { parseUnits, parseEther } from 'viem'
import type { Address } from 'viem'
import { contractFactory } from './contractFactory'
import type { WriteReturnType } from './contractFactory'
import { SIMPLE_YD_TOKEN_ABI } from '../../contract'
import type { UseContractReadReturn } from './useContractRead'
import { useAccount, useEstimateGas } from 'wagmi'
import type { UseWaitForTransactionReceiptReturnType as ReceiptReturnType } from 'wagmi'
import { useState } from 'react'

interface UseSimpleYDTokenProps {
  address?: Address,           // YDÂ∏ÅÂêàÁ∫¶Âú∞ÂùÄ ÈªòËÆ§Ôºö0xA812265c869F2BCB755980677812F253459A0cc7
  spenderAddress?: Address,   // ÊîØ‰ªòËÄÖÂú∞ÂùÄ
  enabled?: boolean           // ÊòØÂê¶ÂêØÁî®
}

interface StakeInfo {
  amount: bigint          // Ë¥®ÊäºÈáëÈ¢ù
  startTime: number       // Ë¥®ÊäºÂºÄÂßãÊó∂Èó¥
  lockPeriod: number      // ÈîÅÂÆöÊúüÔºàÁßíÔºâ
  rewardRate: number      // Âπ¥ÂåñÊî∂ÁõäÁéáÔºàÂü∫ÁÇπÔºå10000 = 100%Ôºâ
  lastClaimTime: number   // ‰∏äÊ¨°È¢ÜÂèñÊî∂ÁõäÊó∂Èó¥
}

const YD_CONTRACT_ADDRESS = '0xA812265c869F2BCB755980677812F253459A0cc7'

export function useSimpleYDToken({ address = YD_CONTRACT_ADDRESS, spenderAddress, enabled = true }: UseSimpleYDTokenProps): {
  // ‰ª£Â∏ÅÊÄª‰æõÂ∫îÈáè
  totalSupply: bigint,
  // ÂΩìÂâçÁî®Êà∑ÁöÑ‰ª£Â∏Å‰ΩôÈ¢ù
  balance: bigint,
  // ÂΩìÂâçÁî®Êà∑ÂØπÊåáÂÆöÂú∞ÂùÄÁöÑÊéàÊùÉÈ¢ùÂ∫¶
  allowance: bigint
  // ËΩ¨Ë¥¶Êî∂ÊçÆ
  transferReceipt: ReceiptReturnType,
  // ÊéàÊùÉÊï∞ÊçÆ
  approveReceipt: ReceiptReturnType,
  // ‰ª£ÁêÜËΩ¨Ë¥¶Êï∞ÊçÆ
  transferFromReceipt: ReceiptReturnType,
  // ÂÖëÊç¢YDÂ∏ÅÊï∞ÊçÆ
  exchangeETHForTokensReceipt: ReceiptReturnType,
  // Ë¥®ÊäºYD‰ª£Â∏ÅÊï∞ÊçÆ
  stakeReceipt: ReceiptReturnType,
  // Ëß£Èô§Ë¥®ÊäºÊï∞ÊçÆ
  unstakeReceipt: ReceiptReturnType,
  // È¢ÜÂèñË¥®ÊäºÊî∂ÁõäÊï∞ÊçÆ
  claimRewardReceipt: ReceiptReturnType, 
  // ÈáçÊñ∞Ëé∑Âèñ‰ΩôÈ¢ù
  refetchBalance: () => void
  // ÈáçÊñ∞Ëé∑ÂèñÊéàÊùÉÈ¢ùÂ∫¶
  refetchAllowance: () => void
  // Ëé∑ÂèñË¥®Êäº‰ø°ÊÅØ
  getStakeInfo: (user: Address) => UseContractReadReturn<StakeInfo>
  // ËÆ°ÁÆóÂæÖÈ¢ÜÂèñÂ•ñÂä±
  calculatePendingReward: (user: Address) => UseContractReadReturn<bigint>
  // Ê£ÄÊµãÊòØÂê¶ÂèØËß£Èô§Ë¥®Êäº
  canUnstake: (user: Address) => UseContractReadReturn<boolean>


  // ËΩ¨Ë¥¶
  transfer: (to: Address, amount: string) => Promise<WriteReturnType>
  // ÊéàÊùÉÂáΩÊï∞
  approve: (spender: Address, amount: string) => Promise<WriteReturnType>
  // ‰ª£ÁêÜËΩ¨Ë¥¶ÂáΩÊï∞Ôºà‰ªéÂÖ∂‰ªñÂú∞ÂùÄËΩ¨Ë¥¶
  transferFrom: (from: Address, to: Address, amount: string) => Promise<WriteReturnType>
  // ETHÂÖëÊç¢YDÂ∏Å
  exchangeETHForTokens: (ether: string) => Promise<WriteReturnType>
  // Ë¥®ÊäºYD‰ª£Â∏Å
  stake: (amount: bigint, lockPeriod: bigint) => Promise<WriteReturnType>
  // Ëß£Èô§Ë¥®Êäº
  unstake: (forceUnlock: boolean) => Promise<WriteReturnType>
  // È¢ÜÂèñË¥®ÊäºÊî∂Áõä
  claimReward: () => Promise<WriteReturnType>
} {

  const { address: userAddress } = useAccount()

  const [estGasTo, setEstGasTo] = useState<Address>()
  const [estGasValue, setEstGasValue] = useState<bigint>()
  const { 
    data: gasEstimate, 
    refetch: refetchEstimateGas,
  } = useEstimateGas({
      account: userAddress,
      to: estGasTo,
      value: estGasValue,
      query: {
        enabled: false
      }
    })

  /* ========== ËæÖÂä©ÊñπÊ≥ï ========== */
  /**
   * Ëß£ÊûêÈáëÈ¢ù
   * Â∞ÜÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÁöÑÈáëÈ¢ùËΩ¨Êç¢‰∏∫ bigintÔºàËÄÉËôë‰ª£Â∏ÅÁ≤æÂ∫¶Ôºâ
   * @param amount - Â≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÁöÑÈáëÈ¢ùÔºåÂ¶Ç '100.5'
   * @returns bigint Á±ªÂûãÁöÑ‰ª£Â∏ÅÊï∞Èáè
   * @throws Â¶ÇÊûú‰ª£Â∏ÅÁ≤æÂ∫¶Êú™Âä†ËΩΩÔºåÊäõÂá∫ÈîôËØØ
   */
  const parseAmount = (amount: string) => {
    if (!decimals) throw new Error('Decimals not loaded')
    return parseUnits(amount, decimals as number)
  }

  const prepareRefetchEstimateGas = async (to?: Address, value?: bigint) => {
    setEstGasTo(to)
    setEstGasValue(value)

    // Á≠âÂæÖ React ‰∏ã‰∏ÄÊ¨°Ê∏≤ÊüìÂë®ÊúüÔºåÁ°Æ‰øù state Êõ¥Êñ∞
    await new Promise(resolve => setTimeout(resolve, 0))

    console.log(`üî¢ ËØ∑Ê±ÇÂèÇÊï∞: to->${to} / value->${value}`)
    // ÁÑ∂ÂêéË∞ÉÁî® refetch
    await refetchEstimateGas()
    console.log('‚õΩÔ∏è Estimate Gas:', gasEstimate)

    // ‚úÖ Á´ãÂç≥Ê∏ÖÁêÜ
    setEstGasTo(undefined)
    setEstGasValue(undefined)
  }

  const factory = contractFactory(address, SIMPLE_YD_TOKEN_ABI)

  /* ========== ËØªÂèñÂêàÁ∫¶Êï∞ÊçÆ ========== */

  // ËØªÂèñ‰ª£Â∏ÅÊÄª‰æõÂ∫îÈáè
  const { data: totalSupply } = factory.read('totalSupply')()

  // ËØªÂèñÂΩìÂâçÁî®Êà∑ÁöÑ‰ª£Â∏Å‰ΩôÈ¢ù
  const { data: balance, refetch: refetchBalance } = factory.read('balanceOf', enabled && !!userAddress)()

  // ËØªÂèñ‰ª£Â∏ÅÁ≤æÂ∫¶
  const { data: decimals } = factory.read('decimals')()

  // ËØªÂèñÂΩìÂâçÁî®Êà∑ÂØπÊåáÂÆöÂú∞ÂùÄÁöÑÊéàÊùÉÈ¢ùÂ∫¶
  const { data: allowance, refetch: refetchAllowance } = factory.read('allowance')(userAddress, spenderAddress)

  // Ëé∑ÂèñË¥®Êäº‰ø°ÊÅØ
  const getStakeInfo = (user: Address) => {
    return factory.read<StakeInfo>('getStakeInfo')(user)
  }

  // ËÆ°ÁÆóÂæÖÈ¢ÜÂèñÂ•ñÂä±
  const calculatePendingReward = (user: Address) => {
    return factory.read<bigint>('calculatePendingReward')(user)
  }

  // Êü•Ê£ÄÊòØÂê¶ÂèØËß£Èô§Ë¥®Êäº
  const canUnstake = (user: Address) =>{
    return factory.read<boolean>('canUnstake')(user)
  }

  /* ========== ÂêàÁ∫¶ÂÜôÂÖ•ÊñπÊ≥ï ========== */

  // ËΩ¨Ë¥¶
  const transferWriter = factory.write('transfer')
  /**
   * ËΩ¨Ë¥¶ÂáΩÊï∞
   * Â∞Ü‰ª£Â∏Å‰ªéÂΩìÂâçÁî®Êà∑ËΩ¨Ë¥¶Âà∞ÊåáÂÆöÂú∞ÂùÄ
   * @param to - Êé•Êî∂Âú∞ÂùÄ
   * @param amount - ËΩ¨Ë¥¶ÈáëÈ¢ùÔºàÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ¶Ç '100.5'Ôºâ
   * @returns ‰∫§ÊòìÁöÑ Promise
   * @throws Â¶ÇÊûúËΩ¨Ë¥¶ÂäüËÉΩ‰∏çÂèØÁî®ÔºåÊäõÂá∫ÈîôËØØ
   */
  const transfer = async (to: Address, amount: string) => {
    const parsedAmount = parseAmount(amount)

    await prepareRefetchEstimateGas(to, parsedAmount)

    return transferWriter.send(to, parsedAmount, {
      gas: gasEstimate
    })
  }

  // ÊéàÊùÉ
  const approveWriter = factory.write('approve')
  /**
   * ÊéàÊùÉÂáΩÊï∞
   * ÊéàÊùÉÊåáÂÆöÂú∞ÂùÄÂèØ‰ª•ÊîØÈÖçÁöÑ‰ª£Â∏ÅÊï∞Èáè
   * @param spender - Ë¢´ÊéàÊùÉÂú∞ÂùÄ
   * @param amount - ÊéàÊùÉÈáëÈ¢ùÔºàÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ¶Ç '1000'Ôºâ
   * @returns ‰∫§ÊòìÁöÑ Promise
   * @throws Â¶ÇÊûúÊéàÊùÉÂäüËÉΩ‰∏çÂèØÁî®ÔºåÊäõÂá∫ÈîôËØØ
   */
  const approve = async (spender: Address, amount: string) => {
    const parsedAmount = parseAmount(amount)

    await prepareRefetchEstimateGas(YD_CONTRACT_ADDRESS, undefined)

    return approveWriter.send(spender, parsedAmount, {
      gas: gasEstimate
    })
  }

  // ‰ª£ÁêÜËΩ¨Ë¥¶ÂáΩÊï∞ÁöÑÂÜôÂÖ• Hook
  const transferFromWriter = factory.write('transferFrom')
  /**
   * ‰ª£ÁêÜËΩ¨Ë¥¶ÂáΩÊï∞
   * ‰ªéÊåáÂÆöÂú∞ÂùÄËΩ¨Ë¥¶Âà∞Âè¶‰∏Ä‰∏™Âú∞ÂùÄÔºàÈúÄË¶ÅÊèêÂâçÊéàÊùÉÔºâ
   * @param from - ËΩ¨Âá∫Âú∞ÂùÄ
   * @param to - Êé•Êî∂Âú∞ÂùÄ
   * @param amount - ËΩ¨Ë¥¶ÈáëÈ¢ùÔºàÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ¶Ç '50'Ôºâ
   * @returns ‰∫§ÊòìÁöÑ Promise
   * @throws Â¶ÇÊûú‰ª£ÁêÜËΩ¨Ë¥¶ÂäüËÉΩ‰∏çÂèØÁî®ÔºåÊäõÂá∫ÈîôËØØ
   */
  const transferFrom = async (from: Address, to: Address, amount: string) => {
    const parsedAmount = parseAmount(amount)

    await prepareRefetchEstimateGas(to, parsedAmount)

    return transferFromWriter.send(from, to, parsedAmount)
  }

  // ÂÖëÊç¢YDÂ∏Å
  const exchangeETHForTokensWriter = factory.write('exchangeETHForTokens')
  /**
   * ÂÖëÊç¢YDÂ∏Å (ETH -> YD)
   * @param ether ÂÖëÊç¢ÁöÑETHÈáëÈ¢ù
   * @returns 
   */
  const exchangeETHForTokens = async (ether: string) => {
    await prepareRefetchEstimateGas(YD_CONTRACT_ADDRESS, parseEther(ether))

    return exchangeETHForTokensWriter.send({
      value: parseEther(ether),
      gas: gasEstimate
    })
  }

  // Ë¥®ÊäºYD‰ª£Â∏Å
  const stakeWriter = factory.write('stake')
  /**
   * Ë¥®ÊäºYD‰ª£Â∏Å
   * @param amount Ë¥®ÊäºÊï∞Èáè
   * @param lockPeriod ÈîÅÂÆöÊúüÔºà30/90/180Â§©Ôºâ
   * @returns 
   */
  const stake = async(amount: bigint, lockPeriod: bigint) => {
    return stakeWriter.send(amount, lockPeriod)
  }

  // Ëß£Èô§Ë¥®Êäº
  const unstakeWriter = factory.write('unstake')
  /**
   * Ëß£Èô§Ë¥®Êäº
   * @param forceUnlock ÊòØÂê¶Âº∫Âà∂Ëß£ÈîÅÔºà‰ºöÊâ£Èô§20%ÊÉ©ÁΩöÔºâ
   * @returns 
   */
  const unstake = async (forceUnlock: boolean) => {
    return unstakeWriter.send(forceUnlock)
  }

  // È¢ÜÂèñË¥®ÊäºÊî∂Áõä
  const claimRewardWriter = factory.write('claimReward')
  /**
   * È¢ÜÂèñË¥®ÊäºÊî∂Áõä
   * @returns 
   */
  const claimReward = async () => {
    return claimRewardWriter.send()
  }

  return {
    /* ‰ª£Â∏ÅÂü∫Êú¨‰ø°ÊÅØ */
    totalSupply: totalSupply as bigint,
    balance: balance as bigint,
    allowance: allowance as bigint,
    transferReceipt: transferWriter.receipt,
    approveReceipt: approveWriter.receipt,
    transferFromReceipt: transferFromWriter.receipt,
    exchangeETHForTokensReceipt: exchangeETHForTokensWriter.receipt,
    stakeReceipt: stakeWriter.receipt,
    unstakeReceipt: unstakeWriter.receipt,
    claimRewardReceipt: claimRewardWriter.receipt,

    /* ÊñπÊ≥ï */
    refetchBalance,
    refetchAllowance,
    getStakeInfo,
    calculatePendingReward,
    canUnstake,
    
    transfer,
    approve,
    transferFrom,
    exchangeETHForTokens,
    stake,
    unstake,
    claimReward,
  }
}