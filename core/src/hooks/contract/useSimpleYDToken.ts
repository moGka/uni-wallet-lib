import { parseUnits, parseEther } from 'viem'
import type { Address } from 'viem'
import { useContractRead } from './useContractRead'
import { useContractWrite } from './useContractWrite'
import { SIMPLE_YD_TOKEN_ABI } from '../../contract'
import { useAccount, useEstimateGas } from 'wagmi'
import type { UseWaitForTransactionReceiptReturnType as ReceiptReturnType } from 'wagmi'
import { useState } from 'react'

interface UseSimpleYDTokenProps {
  address?: Address,           // YDÂ∏ÅÂêàÁ∫¶Âú∞ÂùÄ ÈªòËÆ§Ôºö0xA812265c869F2BCB755980677812F253459A0cc7
  spenderAddress?: Address,   // ÊîØ‰ªòËÄÖÂú∞ÂùÄ
  enabled?: boolean           // ÊòØÂê¶ÂêØÁî®
}

const YD_CONTRACT_ADDRESS = '0xA812265c869F2BCB755980677812F253459A0cc7'

export function useSimpleYDToken({ address = YD_CONTRACT_ADDRESS, spenderAddress, enabled = true }: UseSimpleYDTokenProps): {
  // ‰ª£Â∏ÅÊÄª‰æõÂ∫îÈáè
  totalSupply: bigint,
  // ÂΩìÂâçÁî®Êà∑ÁöÑ‰ª£Â∏Å‰ΩôÈ¢ù
  balance: bigint,
  // ÂΩìÂâçÁî®Êà∑ÂØπÊåáÂÆöÂú∞ÂùÄÁöÑÊéàÊùÉÈ¢ùÂ∫¶
  allowance: bigint
  // ËΩ¨Ë¥¶Êî∂ÊçÆ
  transferReceipt: ReceiptReturnType,
  // ÊéàÊùÉÊï∞ÊçÆ
  approveReceipt: ReceiptReturnType,
  // ‰ª£ÁêÜËΩ¨Ë¥¶Êï∞ÊçÆ
  transferFromReceipt: ReceiptReturnType,
  // ÈáçÊñ∞Ëé∑Âèñ‰ΩôÈ¢ù
  refetchBalance: () => void
  // ÈáçÊñ∞Ëé∑ÂèñÊéàÊùÉÈ¢ùÂ∫¶
  refetchAllowance: () => void
  // ËΩ¨Ë¥¶
  transfer: (to: Address, amount: string) => Promise<any>
  // ÊéàÊùÉÂáΩÊï∞
  approve: (spender: Address, amount: string) => Promise<any>
  // ‰ª£ÁêÜËΩ¨Ë¥¶ÂáΩÊï∞Ôºà‰ªéÂÖ∂‰ªñÂú∞ÂùÄËΩ¨Ë¥¶
  transferFrom: (from: Address, to: Address, amount: string) => Promise<any>
  // ETHÂÖëÊç¢YDÂ∏Å
  exchangeETHForTokens: (ether: string) => Promise<any>
} {

  const { address: userAddress } = useAccount()

  const [estGasTo, setEstGasTo] = useState<Address>()
  const [estGasValue, setEstGasValue] = useState<bigint>()
  const { 
    data: gasEstimate, 
    refetch: refetchEstimateGas,
  } = useEstimateGas({
      account: userAddress,
      to: estGasTo,
      value: estGasValue,
      query: {
        enabled: false
      }
    })

  /* ========== ËæÖÂä©ÊñπÊ≥ï ========== */
  /**
   * Ëß£ÊûêÈáëÈ¢ù
   * Â∞ÜÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÁöÑÈáëÈ¢ùËΩ¨Êç¢‰∏∫ bigintÔºàËÄÉËôë‰ª£Â∏ÅÁ≤æÂ∫¶Ôºâ
   * @param amount - Â≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÁöÑÈáëÈ¢ùÔºåÂ¶Ç '100.5'
   * @returns bigint Á±ªÂûãÁöÑ‰ª£Â∏ÅÊï∞Èáè
   * @throws Â¶ÇÊûú‰ª£Â∏ÅÁ≤æÂ∫¶Êú™Âä†ËΩΩÔºåÊäõÂá∫ÈîôËØØ
   */
  const parseAmount = (amount: string) => {
    if (!decimals) throw new Error('Decimals not loaded')
    return parseUnits(amount, decimals as number)
  }

  const prepareRefetchEstimateGas = async (to?: Address, value?: bigint) => {
    setEstGasTo(to)
    setEstGasValue(value)

    // Á≠âÂæÖ React ‰∏ã‰∏ÄÊ¨°Ê∏≤ÊüìÂë®ÊúüÔºåÁ°Æ‰øù state Êõ¥Êñ∞
    await new Promise(resolve => setTimeout(resolve, 0))

    console.log(`üî¢ ËØ∑Ê±ÇÂèÇÊï∞: to->${to} / value->${value}`)
    // ÁÑ∂ÂêéË∞ÉÁî® refetch
    await refetchEstimateGas()
    console.log('‚õΩÔ∏è Estimate Gas:', gasEstimate)

    // ‚úÖ Á´ãÂç≥Ê∏ÖÁêÜ
    setEstGasTo(undefined)
    setEstGasValue(undefined)
  }

  /* ========== ËØªÂèñÂêàÁ∫¶Êï∞ÊçÆ ========== */

  // ËØªÂèñ‰ª£Â∏ÅÊÄª‰æõÂ∫îÈáè
  const { data: totalSupply } = useContractRead({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'totalSupply',
    enabled
  })

  // ËØªÂèñÂΩìÂâçÁî®Êà∑ÁöÑ‰ª£Â∏Å‰ΩôÈ¢ù
  const { data: balance, refetch: refetchBalance } = useContractRead({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'balanceOf',
    args: userAddress ? [userAddress] : undefined,
    enabled: enabled && !!userAddress,
  })

  // ËØªÂèñ‰ª£Â∏ÅÁ≤æÂ∫¶
  const { data: decimals } = useContractRead({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'decimals',
    enabled
  })

  // ËØªÂèñÂΩìÂâçÁî®Êà∑ÂØπÊåáÂÆöÂú∞ÂùÄÁöÑÊéàÊùÉÈ¢ùÂ∫¶
  const { data: allowance, refetch: refetchAllowance } = useContractRead({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'allowance',
    args: userAddress && spenderAddress ? [userAddress, spenderAddress] : undefined,
    enabled: enabled && !!userAddress && !!spenderAddress,
  })

  /* ========== ÂêàÁ∫¶ÂÜôÂÖ•ÊñπÊ≥ï ========== */

  // ËΩ¨Ë¥¶
  const transferWrite = useContractWrite({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'transfer'
  })
  /**
   * ËΩ¨Ë¥¶ÂáΩÊï∞
   * Â∞Ü‰ª£Â∏Å‰ªéÂΩìÂâçÁî®Êà∑ËΩ¨Ë¥¶Âà∞ÊåáÂÆöÂú∞ÂùÄ
   * @param to - Êé•Êî∂Âú∞ÂùÄ
   * @param amount - ËΩ¨Ë¥¶ÈáëÈ¢ùÔºàÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ¶Ç '100.5'Ôºâ
   * @returns ‰∫§ÊòìÁöÑ Promise
   * @throws Â¶ÇÊûúËΩ¨Ë¥¶ÂäüËÉΩ‰∏çÂèØÁî®ÔºåÊäõÂá∫ÈîôËØØ
   */
  const transfer = async (to: Address, amount: string) => {
    if (!transferWrite.writeAsync) throw new Error('Transfer not available')
    const parsedAmount = parseAmount(amount)
  
    await prepareRefetchEstimateGas(to, parsedAmount)

    return transferWrite.writeAsync({ args: [to, parsedAmount] })
  }

  // ÊéàÊùÉ
  const approveWrite = useContractWrite({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'approve'
  })
  /**
   * ÊéàÊùÉÂáΩÊï∞
   * ÊéàÊùÉÊåáÂÆöÂú∞ÂùÄÂèØ‰ª•ÊîØÈÖçÁöÑ‰ª£Â∏ÅÊï∞Èáè
   * @param spender - Ë¢´ÊéàÊùÉÂú∞ÂùÄ
   * @param amount - ÊéàÊùÉÈáëÈ¢ùÔºàÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ¶Ç '1000'Ôºâ
   * @returns ‰∫§ÊòìÁöÑ Promise
   * @throws Â¶ÇÊûúÊéàÊùÉÂäüËÉΩ‰∏çÂèØÁî®ÔºåÊäõÂá∫ÈîôËØØ
   */
  const approve = async (spender: Address, amount: string) => {
    if (!approveWrite.writeAsync) throw new Error('Approve not available')
    const parsedAmount = parseAmount(amount)
    
    await prepareRefetchEstimateGas(YD_CONTRACT_ADDRESS, undefined)

    return approveWrite.writeAsync({args: [spender, parsedAmount]})
  }

  // ‰ª£ÁêÜËΩ¨Ë¥¶ÂáΩÊï∞ÁöÑÂÜôÂÖ• Hook
  const transferFromWrite = useContractWrite({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'transferFrom'
  })
  /**
   * ‰ª£ÁêÜËΩ¨Ë¥¶ÂáΩÊï∞
   * ‰ªéÊåáÂÆöÂú∞ÂùÄËΩ¨Ë¥¶Âà∞Âè¶‰∏Ä‰∏™Âú∞ÂùÄÔºàÈúÄË¶ÅÊèêÂâçÊéàÊùÉÔºâ
   * @param from - ËΩ¨Âá∫Âú∞ÂùÄ
   * @param to - Êé•Êî∂Âú∞ÂùÄ
   * @param amount - ËΩ¨Ë¥¶ÈáëÈ¢ùÔºàÂ≠óÁ¨¶‰∏≤ÂΩ¢ÂºèÔºåÂ¶Ç '50'Ôºâ
   * @returns ‰∫§ÊòìÁöÑ Promise
   * @throws Â¶ÇÊûú‰ª£ÁêÜËΩ¨Ë¥¶ÂäüËÉΩ‰∏çÂèØÁî®ÔºåÊäõÂá∫ÈîôËØØ
   */
  const transferFrom = async (from: Address, to: Address, amount: string) => {
    if (!transferFromWrite.writeAsync) throw new Error('TransferFrom not available')
    const parsedAmount = parseAmount(amount)

    await prepareRefetchEstimateGas(to, parsedAmount)

    return transferFromWrite.writeAsync({args: [from, to, parsedAmount]})
  }

  // ÂÖëÊç¢YDÂ∏Å (ETH -> YD)
  const exchangeETHForTokensWriter = useContractWrite({
    address,
    abi: SIMPLE_YD_TOKEN_ABI,
    functionName: 'exchangeETHForTokens'
  })
  const exchangeETHForTokens = async (ether: string) => {
    if (!exchangeETHForTokensWriter.writeAsync) {
      throw new Error('Exchange not available')
    }

    await prepareRefetchEstimateGas(YD_CONTRACT_ADDRESS, parseEther(ether))
    
    return exchangeETHForTokensWriter.writeAsync({
      value: parseEther(ether),
      gas: gasEstimate
    })
  }


  return {
    /* ‰ª£Â∏ÅÂü∫Êú¨‰ø°ÊÅØ */
    totalSupply: totalSupply as bigint,
    balance: balance as bigint,
    allowance: allowance as bigint,
    transferReceipt: transferWrite.receipt,
    approveReceipt: approveWrite.receipt,
    transferFromReceipt: transferFromWrite.receipt,

    /* ÊñπÊ≥ï */
    refetchBalance,
    refetchAllowance,
    transfer,
    approve,
    transferFrom,
    exchangeETHForTokens
  }
}